=head1 DESCRIPTION

This is an attempt to outline our program structure

=head1 Naming conventions

Throughout this document, we'll be refering to the gerneralized parts of the program. These will point to modules/scripts with very different names, so this is the mapping.

    Backend	: depends on the backend (Mail::Box, Mail::CClient, etc)
    Filter	: Oserp::Filter.pm
    Config Backend	: Oserp::Config.pm
    BackendWrapper	: Oserp::Backend.pm
    PerlGlue	: oserp (perl script)
    GUI	: (aka. CursesGUI, GTKGUI, OtherGUI) Module name should
        : describe what the interface looks like. The end name
        : can be used on the oserp command line to specify what
        : gui to call. eg: oserp --gui Pine.
        : Oserp::GUI::Pine.pm Oserp::GUI::GTKmail

If any of those require sub-modules, they should go under their own namespace. For example, Oserp::GUI::Pine::MessageList.pm or Oserp::Config::Config.xs

=head1 Object Structure Diagram

    +---------+  +--------+  +----------------+
    | Backend |  | Filter |  | Config Backend |
    +---+-----+  +----+---+  +-------+--------+
        |             |         |
   +---+------------+ |  +------+
   | BackendWrapper | |  |
   +--------------+-+ |  |
                  |   |  |
                +-+---+--+-+
                | PerlGlue |
                +-+---+--+-+
                  |   |  |
          +------+    |  +--------------+
          |           |                 |
    +-----+-----+   +-+-------+   +-----+-----+
    | CursesGUI |   | GTK GUI |   | Other GUI |
    +-----------+   +---------+   +-----------+

=head1 Backend

Backend provides the raw access to mailboxes, and stuff like that. In the Mail::Box world, this is Mail::Box::Parser::Perl, Mail::Box::Mbox/IMAP4/POP3/Dbx/etc, etc modules. There will likely be multiple backend modules, for example a module for sending mail in each of the various ways (local sendmail, local qmail, local exim, smtp, smtp-auth, etc).

=head1 BackendWrapper

This is the the module that will provide the abstraction over the different mailboxes. In our current reality, it's Mail::Box. It could be Mail::CClient, or Mail::Folder, or Mail::GNUMailUtils(doesn't exist yet).

I'm up in the air over whether we should further abstract the existing collections. If we did, we could also offer other various storage and sending mechinisms, and mix and match backends. However, that's re-creating nearly perfect wheels.

=head1 Filter

Ties into Mail::GPG, Mail::Audit, Mail::SpamAssassin, etc, to provide a way to do things to mail when they come in, or when they leave.

Mail::Box already provides this functionallity, but we're planning on using a different backend (for speed, and protocol support, GNU MailUtils) so, we'll need this to tie in somewhere.

=head1 Config Backend

This should hanld the reading/writing/parsing/querying of the config. PerlGlue will communicate with it. It will use some other 3rd party modules to do storage and stuff. We should provide a default config format (xml?), and possibly support reading other configs, and parsing them into our format (.pinerc, .muttrc, etc).

=head1 PerlGlue

PerlGlue Maintains a hash structure of the mailboxes.

PerlGlue will call new() on the GUI, passing a referance to itself.

GUI has a referance to the PerlGlue module.

GUI makes callbacks to the PerlGlue to retrieve data structures. Data structures will always be passed as a referance to the data, so watch out for recursive referances and such (was going to do a deep copy, but that get's very complex).

GUI will need to make all the calls to open things, like folders:

    $self->{glue}->openfolder($folderurl);

PerlGlue will also hold all the config information. It will load the config when it starts up. If the GUI needs to update the config, it should call the methods in PerlGlue to do so.

The PerlGlue will provide separate functions for all normal opperations. The GUI can then decide how it wants to arrange them, and so forth.
For example, the GUI could have 3 panes (folder listing, message list, message display). It would call:

    +-------------------------------------------------------------+
    | $self->{glue}->messages($folder) call                       |
    +--------------------------+----------------------------------+
    | $self->{glue}->folders() |                                  |
    |                          |  $self->{glue}->message($msgnum) |
    |                          |                                  |
    +--------------------------+----------------------------------+

We have to come up with all the ins and outs of how PerlGlue should work, what it needs, etc. If we were committed to Mail::Box as a backend, a lot of this work would be done. We could base our model off of what Mail::Box offers, because it's close, but it doesn't totally fit what we need.

Mail::Box is supposed to make it easy to write a MUA, but also to do all kinds of automated stuff, and facilitate scripts doing all kinds of stuff. We want to be a little more specific in our offering.

Folder updates / checking for new mail: The GUI should handle the timing of when to do these opperations. When it needs to do so, it should call:

	$self->{glue}->update($folder);

It will then want to refresh any menus and such it has. In the example interface above, it would need to grab a new message list, and grab a new folder list (cause that will probably display how many messages are in each folder).

=head1 GUI - Pine

Will handle all the GUI stuff, and pull data from PerlGlue.

